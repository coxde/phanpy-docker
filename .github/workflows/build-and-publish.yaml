name: Publish Image

on:
    workflow_dispatch:
        inputs:
            phanpy_version:
                description: Target Phanpy Version
                required: true
                type: string
                default: latest
    push:
        branches:
            - "renovate/**"
    pull_request:
        branches:
            - main
        paths-ignore:
            - "**.md"
    schedule:
        - cron: "30 4 * * 1" # At 04:30 on every Monday.

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}
    UPSTREAM: cheeaun/phanpy

jobs:
    build_and_push_to_registry:
        name: "Build and Push to Registry: Phanpy ${{ inputs.phanpy_version }}"
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
        steps:
            - name: Check Version
              id: version
              run: |
                  echo "### Status" >> ${GITHUB_STEP_SUMMARY}

                  tag="${{ inputs.logLevel || 'latest' }}"

                  if [[ "${tag}" == "latest" ]]; then
                    tag=$(curl -s https://api.github.com/repos/${UPSTREAM}/releases/latest \
                          | jq --raw-output '.tag_name')
                  fi

                  echo "value=${tag}" >> ${GITHUB_OUTPUT}
                  echo " - Tag: ${tag}" >> ${GITHUB_STEP_SUMMARY}
            - uses: warjiang/setup-skopeo@main
            - name: Check If Tag needs_update
              id: tag_check
              run: |
                  if skopeo inspect docker://${REGISTRY}/${IMAGE_NAME}:${{ steps.version.outputs.value }}; then
                    echo ":green_square: We are up to date!" >> ${GITHUB_STEP_SUMMARY}
                    echo "needs_update=false" >> ${GITHUB_OUTPUT}
                  else
                    echo ":red_square: **Update required!**" >> ${GITHUB_STEP_SUMMARY}
                    echo "needs_update=true" >> ${GITHUB_OUTPUT}
                  fi
            - name: Checkout Repository
              if: ${{ steps.tag_check.outputs.needs_update == 'true' }}
              uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
            - name: Login to the Container Registry
              if: ${{ steps.tag_check.outputs.needs_update == 'true' }}
              uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Extract Metadata
              if: ${{ steps.tag_check.outputs.needs_update == 'true' }}
              id: meta
              uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      ${{ steps.version.outputs.value }}
                      latest
            - name: Set up QEMU
              uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3
            - name: Build and Push Image
              if: ${{ steps.tag_check.outputs.needs_update == 'true' }}
              uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
              with:
                  platforms: linux/amd64,linux/arm64
                  context: .
                  file: ./Containerfile
                  push: true
                  build-args: |
                      VERSION=${{ steps.version.outputs.value }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
